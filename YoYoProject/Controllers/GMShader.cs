using System.IO;
using YoYoProject.Models;

namespace YoYoProject.Controllers
{
    public sealed class GMShader : GMResource
    {
        private GMShaderType type;
        public GMShaderType Type
        {
            get { return GetProperty(type); }
            set { SetProperty(value, ref type); }
        }

        private string fragmentContents;
        public string FragmentContents
        {
            get
            {
                if (fragmentContents != null)
                {
                    if (File.Exists(FragementShaderFullPath))
                        fragmentContents = File.ReadAllText(FragementShaderFullPath);
                    else
                        fragmentContents = "";
                }

                return fragmentContents;
            }

            set
            {
                if (value == vertexContents)
                    return;

                fragmentContents = value ?? "";
                Dirty = true;
            }
        }

        private string vertexContents;
        public string VertexContents
        {
            get
            {
                if (vertexContents != null)
                {
                    if (File.Exists(VertexShaderFullPath))
                        vertexContents = File.ReadAllText(VertexShaderFullPath);
                    else
                        vertexContents = "";
                }

                return vertexContents;
            }

            set
            {
                if (value == vertexContents)
                    return;

                vertexContents = value ?? "";
                Dirty = true;
            }
        }

        protected internal override string ResourcePath => $@"shaders\{Name}\{Name}.yy";

        private string FragementShaderFullPath => Path.Combine(Project.RootDirectory, $@"shaders\{Name}\{Name}.fsh");

        private string VertexShaderFullPath => Path.Combine(Project.RootDirectory, $@"shaders\{Name}\{Name}.vsh");

        protected internal override void Create()
        {
            Name = Project.Resources.GenerateValidName("shader");
            Type = GMShaderType.GLSLES;

            // TODO Set to the default scripts generated by GMS2?
            //      I'm unsure what domain those scripts fall under, verify that it's legal first
            FragmentContents = "";
            VertexContents = "";
        }

        protected internal override ModelBase Serialize()
        {
            // TODO Unload OnSaveComplete
            if (fragmentContents != null)
                File.WriteAllText(FragementShaderFullPath, fragmentContents);

            // TODO Unload OnSaveComplete
            if (vertexContents != null)
                File.WriteAllText(VertexShaderFullPath, vertexContents);

            return new GMShaderModel
            {
                id = Id,
                name = Name,
                type = Type
            };
        }
    }
}
